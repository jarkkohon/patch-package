"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var child_process_1 = require("child_process");
var fs = require("fs");
var path = require("path");
var rimraf = require("rimraf");
var shellEscape = require("shell-escape");
var tmp = require("tmp");
function makePatch(packageName, appPath) {
    var nodeModulesPath = path.join(appPath, "node_modules");
    var packagePath = path.join(nodeModulesPath, packageName);
    var packageJsonPath = path.join(packagePath, "package.json");
    if (!fs.existsSync(packageJsonPath)) {
        throw new Error("Unable to find local " + packageName + " package.json at " + packageJsonPath);
    }
    var packageVersion = require(packageJsonPath).version;
    var tmpRepo = tmp.dirSync({ unsafeCleanup: true });
    var tmpNodeModulesBackup = tmp.dirSync();
    try {
        var patchesDir_1 = path.join(appPath, "patches");
        if (!fs.existsSync(patchesDir_1)) {
            fs.mkdirSync(patchesDir_1);
        }
        else {
            // remove exsiting patch for this package, if any
            fs.readdirSync(patchesDir_1).forEach(function (fileName) {
                if (fileName.startsWith(packageName + ":")) {
                    console.log("removing", path.join(patchesDir_1, fileName));
                    fs.unlinkSync(path.join(patchesDir_1, fileName));
                }
            });
        }
        // back up the user's node_modules
        child_process_1.execSync(shellEscape(["mv", path.join(appPath, "node_modules"), path.join(tmpNodeModulesBackup.name, "node_modules")]));
        // reinstall the user's node_modules without the changes for this package
        child_process_1.execSync("yarn");
        // move the clean package to the tmp repo
        var tmpPackagePath = path.join(tmpRepo.name, "node_modules", packageName);
        fs.mkdirSync(path.join(tmpRepo.name, "node_modules"));
        child_process_1.execSync(shellEscape(["mv", packagePath, tmpPackagePath]));
        // commit it
        fs.writeFileSync(path.join(tmpRepo.name, ".gitignore"), "!/node_modules\n");
        var tmpExec = function (cmd) { return child_process_1.execSync(cmd, { cwd: tmpRepo.name }); };
        tmpExec("git init");
        tmpExec(shellEscape(["git", "add", "-f", path.join("node_modules", packageName)]));
        tmpExec("git commit -m init");
        // replace package with user's version
        rimraf.sync(tmpPackagePath);
        // copy user's custom version to temp repo
        tmpExec(shellEscape([
            "cp",
            "-R",
            path.join(tmpNodeModulesBackup.name, "node_modules", packageName),
            tmpPackagePath,
        ]));
        // add their files to the index
        tmpExec(shellEscape(["git", "add", "-f", path.join("node_modules", packageName)]));
        // get diff of changes
        var patch = tmpExec("git diff HEAD").toString();
        if (patch.trim() === "") {
            console.warn("\u2049\uFE0F  Not creating patch file for package '" + packageName + "'");
            console.warn("\u2049\uFE0F  There don't appear to be any changes.");
        }
        else {
            var patchFileName = packageName + ":" + packageVersion + ".patch";
            fs.writeFileSync(path.join(patchesDir_1, patchFileName), patch);
            console.log("Created file patches/" + patchFileName + " " + chalk_1.green("âœ”"));
        }
    }
    catch (e) {
        console.error(e);
        throw e;
    }
    finally {
        tmpRepo.removeCallback();
        rimraf.sync(nodeModulesPath);
        fs.renameSync(path.join(tmpNodeModulesBackup.name, "node_modules"), nodeModulesPath);
        tmpNodeModulesBackup.removeCallback();
    }
}
exports.default = makePatch;
//# sourceMappingURL=data:application/json;base64,